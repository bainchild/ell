local function desc()
   it("should pass Lua.org's 5.1 tests (string.lua)",function()
      require('luaorg51_test_string')
   end)
   describe("string.sub",function()
      it("should work with (string,number)",function()
         assert.are.same(string.sub("abcDefG",4),"DefG")
         assert.are.same(string.sub("abcdefG",6),"fG")
      end)
      it("should work with (string,number,number)",function()
         assert.are.same(string.sub("abcdEFG",1,3),"abc")
         assert.are.same(string.sub("abcdEFG",2,4),"bcd")
         assert.are.same(string.sub("abcdEFG",3,-1),"cdEFG")
         assert.are.same(string.sub("abcdEFG",3,-2),"cdEF")
      end)
      it("should NOT work with (string)",function()
         assert.has_error(function()
            string.sub("abc")
         end,"bad argument #2 to 'sub' (number expected, got no value)")
      end)
      it("should NOT work with (string,nil)",function()
         assert.has_error(function()
            string.sub("abc",nil)
         end,"bad argument #2 to 'sub' (number expected, got nil)")
      end)
      it("should NOT work with (string,nil,number)",function()
         assert.has_error(function()
            string.sub("abc",nil,1)
         end,"bad argument #2 to 'sub' (number expected, got nil)")
      end)
   end)
   -- todo: negative tests
   it("string.upper",function()
      local pre = " !\"#$%&'()*+,-./0123456789:;<=>?@"
      local after = "[\\]^_`{|}~"
      local upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      local lower = "abcdefghijklmnopqrstuvwxyz"
      assert.are.equal(pre..upper..after,string.upper(pre..lower..after))
   end)
   it("string.lower",function()
      local pre = " !\"#$%&'()*+,-./0123456789:;<=>?@"
      local after = "[\\]^_`{|}~"
      local upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
      local lower = "abcdefghijklmnopqrstuvwxyz"
      assert.are.equal(pre..lower..after,string.lower(pre..upper..after))
   end)
   it("string.len",function()
      assert.are.equal(string.len("ABCDE"),5)
      assert.are.equal(string.len("ABCDEFGHIJKLMNOPQRSTUVWXYZ"),26)
      assert.are.equal(string.len(""),0)
   end)
   it("string.rep",function()
      assert.are.equal("+",string.rep("+",1))
      assert.are.equal("",string.rep("+",0))
      assert.are.equal("",string.rep("+",-1))
      assert.are.equal("++++++++",string.rep("+",8))
   end)
   pending("string.gfind",function()end)
   pending("string.find",function()end)
   pending("string.gmatch",function()end)
   pending("string.match",function()end)
   -- it("string.match",function()
   --    assert.are.same({"1","2","3"},{string.match("1_2_3","(%d)_(%d)_(%d)")})
   -- end)
   pending("string.gsub",function()end)
   pending("string.format",function()end)
   it("string.char",function()
      assert.are.equal('a',string.char(97))
      assert.are.equal('b',string.char(98))
      assert.are.equal('abc',string.char(97,98,99))
      assert.are.equal('Hello, world!',string.char(72,101,108,108,111,44,32,119,111,114,108,100,33))
   end)
   it("string.byte",function()
      local str = "abcdefghijklmnopqrstuvwxyz"
      assert.are.same(97,string.byte(str))
      assert.are.same(98,string.byte(str,2))
      assert.are.same({97,98,99,100},{string.byte(str,1,4)})
      assert.are.same({97,98},{string.byte(str,1,2)})
   end)
   pending("string.dump",function()end)
   it("string.reverse",function()
      assert.are.same("zyxwvutsrqponmlkjihgfedcba",string.reverse("abcdefghijklmnopqrstuvwxyz"))
      assert.are.same("a",string.reverse("a"))
   end)
   describe("fuzzing #fuzz",function()
      local fuzz=require('luzer').Fuzz
      it("string.sub",function()
         fuzz(function(input)
            local fdp = luzer.FuzzedDataProvider(input)
            string.sub(fdp:consume_string(2^16),fdp:consume_integer(0,2^31))
            string.sub(fdp:consume_string(2^16),fdp:consume_integer(0,2^31),fdp:consume_integer(0,2^31))
         end)
      end)
      pending("string.gfind",function()end)
      pending("string.find",function()end)
      pending("string.gmatch",function()end)
      pending("string.match",function()end)
      pending("string.gsub",function()end)
      pending("string.format",function()end)
      pending("string.upper",function()end)
      pending("string.len",function()end)
      pending("string.rep",function()end)
      pending("string.char",function()end)
      pending("string.dump",function()end)
      pending("string.reverse",function()end)
      pending("string.byte",function()end)
      pending("string.lower",function()end)
      luzer=nil
   end)
end
describe("string",desc) -- this is a test of the tests, to see if they pass with normal string
describe("lstring",function()
   string=require('lstring')
   package.loaded.string=package.loaded.lstring
   desc()
end)